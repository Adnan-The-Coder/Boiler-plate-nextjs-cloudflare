name: CI Pipeline

on:
  push:
    branches:
      - dev
      - test
      - main
  pull_request:
    branches:
      - dev
      - test
      - main

jobs:
  lint:
    name: ES-Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "latest"

      - name: Install dependencies
        run: bun install

      - name: Run ES-Lint
        run: bun run lint

  cloudflare-pages-build:
    name: Cloudflare Pages Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Log Repository Clone
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tCloning repository..."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFrom ${{ github.server_url }}/${{ github.repository }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t * branch            ${{ github.sha }} -> FETCH_HEAD"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tHEAD is now at $(echo ${{ github.sha }} | cut -c1-7) ${{ github.event.head_commit.message || 'Commit message not available' }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tUsing v2 root directory strategy"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccess: Finished cloning repository files"

      - name: Check Wrangler Configuration
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tChecking for configuration in a Wrangler configuration file (BETA)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          
          if [ -f "wrangler.toml" ]; then
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound wrangler.toml file. Reading build configuration..."
            
            # Extract pages_build_output_dir
            BUILD_OUTPUT_DIR=$(grep "pages_build_output_dir" wrangler.toml | cut -d '=' -f2 | tr -d ' "' || echo ".vercel/output/static")
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tpages_build_output_dir: $BUILD_OUTPUT_DIR"
            
            # Extract NODE_VERSION
            NODE_VERSION=$(grep "NODE_VERSION" wrangler.toml | cut -d '=' -f2 | tr -d ' "' || echo "20.x")
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tBuild environment variables: "
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t  - NODE_VERSION: $NODE_VERSION"
            
            # Set NODE_VERSION for later steps
            echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
            echo "BUILD_OUTPUT_DIR=$BUILD_OUTPUT_DIR" >> $GITHUB_ENV
            
            sleep 1
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccessfully read wrangler.toml file."
          else
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tNo wrangler.toml file found. Using default configuration."
            echo "NODE_VERSION=20.x" >> $GITHUB_ENV
            echo "BUILD_OUTPUT_DIR=.vercel/output/static" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "latest"
          
      - name: Detect Tools
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tDetected the following tools from environment: nodejs@$(node -v | cut -c2-), bun@$(bun -v)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tInstalling nodejs $(node -v | cut -c2-)"

      - name: Install Dependencies
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tInstalling project dependencies: bun install --frozen-lockfile"
          bun install --frozen-lockfile
          
          # Log installed packages similar to Cloudflare
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tbun install v$(bun -v)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          
          # Get package list from package.json
          DEPS=$(jq -r '.dependencies | keys | .[]' package.json 2>/dev/null || echo "")
          DEV_DEPS=$(jq -r '.devDependencies | keys | .[]' package.json 2>/dev/null || echo "")
          
          # Log dependencies
          for dep in $DEPS; do
            VERSION=$(jq -r ".dependencies.\"$dep\"" package.json)
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t+ $dep@$VERSION"
          done
          
          for dep in $DEV_DEPS; do
            VERSION=$(jq -r ".devDependencies.\"$dep\"" package.json)
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t+ $dep@$VERSION"
          done
          
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t$(jq '.dependencies | length + .devDependencies | length' package.json 2>/dev/null || echo "Unknown number of") packages installed"

      - name: Install Next-on-Pages
        run: npm install -g @cloudflare/next-on-pages@1

      - name: Run Cloudflare Next-on-Pages
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tExecuting user command: npx @cloudflare/next-on-pages@1"
          npx @cloudflare/next-on-pages@1 2>&1 | while IFS= read -r line; do
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t$line"
          done
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFinished"

      - name: Verify Build Output
        run: |
          if [ -d ".vercel/output/static/_worker.js" ]; then
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tBuild successful - _worker.js found"
          else
            echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tBuild failed - _worker.js not found"
            exit 1
          fi

      - name: Install Wrangler
        run: npm install -g wrangler@3

      - name: Deploy to Cloudflare Pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test')
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tChecking for configuration in a Wrangler configuration file (BETA)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound wrangler.toml file. Reading build configuration..."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tpages_build_output_dir: ${{ env.BUILD_OUTPUT_DIR }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tBuild environment variables: "
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t  - NODE_VERSION: ${{ env.NODE_VERSION }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccessfully read wrangler.toml file."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound _worker.js in output directory. Uploading."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t ⛅️ wrangler 3.101.0"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t-------------------"
          
          # Deploy to Cloudflare Pages
          wrangler pages deploy ${{ env.BUILD_OUTPUT_DIR }} --project-name=your-app-name --branch=${{ github.ref_name }} --commit-dirty=true --verbose
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Simulate Deployment (for PRs)
        if: github.event_name == 'pull_request'
        run: |
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tChecking for configuration in a Wrangler configuration file (BETA)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound wrangler.toml file. Reading build configuration..."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tpages_build_output_dir: ${{ env.BUILD_OUTPUT_DIR }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tBuild environment variables: "
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t  - NODE_VERSION: ${{ env.NODE_VERSION }}"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccessfully read wrangler.toml file."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound _worker.js in output directory. Uploading."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t ⛅️ wrangler 3.101.0"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t-------------------"
          
          # Simulate attaching modules
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tAttaching additional modules:"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t┌───────────────────────────────────────────┬──────┬──────────┐"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t│ Name                                      │ Type │ Size     │"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t├───────────────────────────────────────────┼──────┼──────────┤"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t│ __next-on-pages-dist__/cache/adaptor.js   │ esm  │ 2.29 KiB │"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t├───────────────────────────────────────────┼──────┼──────────┤"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t│ __next-on-pages-dist__/cache/cache-api.js │ esm  │ 0.43 KiB │"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t├───────────────────────────────────────────┼──────┼──────────┤"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t│ __next-on-pages-dist__/cache/kv.js        │ esm  │ 0.35 KiB │"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t├───────────────────────────────────────────┼──────┼──────────┤"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t│ Total (3 modules)                         │      │ 3.06 KiB │"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t└───────────────────────────────────────────┴──────┴──────────┘"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t✨ Compiled Worker successfully"
          
          # Simulate routes.json upload
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tFound _routes.json in output directory. Uploading."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tValidating asset output directory"
          
          # Simulate deployment
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tDeploying your site to Cloudflare's global network..."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tParsed 1 valid header rule."
          
          # Simulate file upload progress
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tUploading... (32/36)"
          sleep 0.5
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tUploading... (34/36)"
          sleep 0.1
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tUploading... (35/36)"
          sleep 0.2
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tUploading... (36/36)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t✨ Success! Uploaded 4 files (32 already uploaded) (1.02 sec)"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\t✨ Upload complete!"
          
          # Simulate final success messages
          sleep 3
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccess: Assets published!"
          sleep 2
          echo "$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")\tSuccess: Your site was deployed!"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cloudflare-pages-build
          path: ${{ env.BUILD_OUTPUT_DIR }}